{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "dailang",
	"patterns": [
		{
			"include": "#shebang"
		},
		{
			"comment": "Language constants",
			"match": "\\b(true|false|nil)\\b",
			"name": "constant.language.dailang"
		},
		{
			"comment": "Built-in function class module",
			"match": "\\b(print|len|type|assert|assert_eq|range|abs|import|Path|os|time|math)\\b(?=\\()",
			"name": "support.function.builtin.dailang"
		},
		{
			"include": "#statements"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"comment": "数字",
			"include": "#numeric_literals"
		},
		{
			"comment": "Terminators",
			"match": ";",
			"name": "punctuation.terminator.dailang"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#delimiters"
		},
		{
			"include": "#operators"
		}
	],
	"repository": {
		"function_define": {
			"patterns": [
				{
					"comment": "魔法方法定义",
					"match": "\\b(fn)\\b\\s+(__\\w+__)\\(",
					"captures": {
						"1": {
							"name": "keyword.function.dailang"
						},
						"2": {
							"name": "support.function.magic.dailang"
						}
					}
				},
				{
					"comment": "函数定义",
					"match": "\\b(fn)\\b\\s+(\\w+)\\(",
					"captures": {
						"1": {
							"name": "keyword.function.dailang"
						},
						"2": {
							"name": "entity.name.function.dailang"
						}
					}
				}
			]
		},
		"brackets": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.curly.dailang"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.curly.dailang"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.round.dailang"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.round.dailang"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "\\[|\\]",
					"name": "punctuation.definition.bracket.square.dailang"
				}
			]
		},
		"delimiters": {
			"patterns": [
				{
					"match": ",",
					"name": "punctuation.other.comma.dailang"
				},
				{
					"comment": "匹配单个点而不是三个点",
					"match": "\\.(?!\\.\\.)",
					"name": "punctuation.other.period.dailang"
				},
				{
					"match": ":",
					"name": "punctuation.other.colon.dailang"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"comment": "Flow control keywords",
					"match": "\\b(break|continue|else|for|if|while|return|in)\\b",
					"name": "keyword.control.dailang"
				},
				{
					"match": "\\bvar\\b",
					"name": "keyword.var.dailang"
				},
				{
					"match": "\\bcon\\b",
					"name": "keyword.con.dailang"
				},
				{
					"match": "\\bfn\\b",
					"name": "keyword.function.dailang"
				},
				{
					"match": "\\bclass\\b",
					"name": "keyword.class.dailang"
				},
				{
					"match": "\\b(not|and|or)\\b",
					"name": "keyword.other.dailang"
				}
			]
		},
		"operators": {
			"comment": "Note that the order here is very important!",
			"patterns": [
				{
					"match": "(\\*|&)(?=\\w)",
					"name": "keyword.operator.address.dailang"
				},
				{
					"match": "\\-\\-",
					"name": "keyword.operator.decrement.dailang"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.dailang"
				},
				{
					"match": "(==|!=|<=|>=|<(?!<)|>(?!>))",
					"name": "keyword.operator.comparison.dailang"
				},
				{
					"match": "(=|\\+=|\\-=|\\|=|\\^=|\\*=|/=|:=|%=|<<=|>>=|&\\^=|&=)",
					"name": "keyword.operator.assignment.dailang"
				},
				{
					"match": "(\\+|\\-|\\*|/|%)",
					"name": "keyword.operator.arithmetic.dailang"
				},
				{
					"match": "(&(?!\\^)|\\||\\^|&\\^|<<|>>)",
					"name": "keyword.operator.arithmetic.bitwise.dailang"
				},
				{
					"match": "\\.\\.\\.",
					"name": "keyword.operator.ellipsis.dailang"
				}
			]
		},
		"shebang": {
			"name": "comment.line.shebang.dailang",
			"match": "\\A(#!).*(?=$)",
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.dailang"
				}
			}
		},
		"statements": {
			"patterns": [
				{
					"include": "#function_define"
				},
				{
					"include": "#comment"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.line.double-slash.dailang",
					"begin": "(\\/\\/)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.dailang"
						}
					},
					"end": "(?:\\n|$)"
				},
				{
					"name": "comment.line.number-sign.dailang",
					"begin": "(\\#)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.dailang"
						}
					},
					"end": "(?:\\n|$)"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"include": "#double_string"
				},
				{
					"include": "#single_string"
				},
				{
					"include": "#raw_string"
				}
			]
		},
		"double_string": {
			"comment": "双引号字符串",
			"name": "string.quoted.double.dailang",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.dailang"
				}
			},
			"end": "\"",
			"patterns": [
				{
					"include": "#string_escaped_char"
				},
				{
					"include": "#string_placeholder"
				}
			]
		},
		"single_string": {
			"comment": "单引号字符串",
			"name": "string.quoted.single.dailang",
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.dailang"
				}
			},
			"end": "'",
			"patterns": [
				{
					"include": "#string_escaped_char"
				},
				{
					"include": "#string_placeholder"
				}
			]
		},
		"raw_string": {
			"comment": "Raw string literals",
			"begin": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.dailang"
				}
			},
			"end": "`",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.dailang"
				}
			},
			"name": "string.quoted.raw.dailang",
			"patterns": [
				{
					"include": "#string_placeholder"
				}
			]
		},
		"numeric_literals": {
			"patterns": [
				{
					"include": "#hexadecimal_number"
				},
				{
					"include": "#octal_number"
				},
				{
					"include": "#binary_number"
				},
				{
					"include": "#decimal_number"
				}
			]
		},
		"decimal_number": {
			"comment": "十进制数字",
			"match": "\\d+",
			"name": "constant.numeric.decimal.dailang"
		},
		"hexadecimal_number": {
			"comment": "十六进制数字",
			"match": "0(x|X)[0-9a-fA-F_]+",
			"name": "constant.numeric.hexadecimal.dailang"
		},
		"octal_number": {
			"comment": "八进制数字",
			"match": "0(o|O)[0-7_]+",
			"name": "constant.numeric.octal.dailang"
		},
		"binary_number": {
			"comment": "二进制数字",
			"match": "0(b|B)[01_]+",
			"name": "constant.numeric.binary.dailang"
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})",
					"name": "constant.character.escape.dailang"
				},
				{
					"match": "\\\\[^0-7xuUabfnrtv\\'\"]",
					"name": "invalid.illegal.unknown-escape.dailang"
				}
			]
		},
		"identifier": {
			"patterns": [
				{
					"name": "variable.language.special.self.dailang",
					"match": "\\b(self)\\b"
				},
				{
					"name": "variable.language.special.class.dailang",
					"match": "\\b(class)\\b"
				},
				{
					"name": "variable.other.dailang",
					"match": "\\w+\\d*"
				}
			]
		}
	},
	"scopeName": "source.dailang"
}